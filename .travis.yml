---
sudo: required
dist: bionic
notifications:
  slack:
    on_failure: always
matrix:
  fast_finish: true
  include:

    - name: "deploy argo cd  wo snaps on focal amd64"
      dist: focal
      arch: amd64
      language: python
      # python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-minikube-latest
        - sudo make deploy-argocd
      after_success:
        - deactivate

    - name: "deploy argo cd  wo snaps on bionic amd64"
      dist: bionic
      arch: amd64
      language: python
      # python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-minikube-latest
        - sudo make deploy-argocd
      after_success:
        - deactivate

    # - name: "deploy SonarQube  wo snaps on bionic"
    #   dist: bionic
    #   arch: amd64
    #   language: python
    #   # python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-minikube-latest
    #     - sudo make deploy-sonarqube
    #   after_success:
    #     - deactivate

    # - name: "deploy SonarQube  snapped minikube kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: minikube
    #         confinement: classic
    #         channel: latest/stable
    #       - name: kubectl
    #         confinement: classic
    #         channel: latest/stable
    #       - name: helm
    #         confinement: classic
    #         channel: latest/stable
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - minikube version
    #     - helm version
    #     - kubectl version --client
    #     - sudo make deploy-sonarqube
    #   after_success:
    #     - deactivate

    # - name: "deploy Prometheus Grafana  wo snaps on bionic" #OK
    #   dist: bionic
    #   arch: amd64
    #   language: python
    #   # python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-minikube-latest
    #     - sudo make deploy-prometheus-demo
    #   after_success:
    #     - deactivate

    # - name: "deploy Prometheus Grafana  snapped minikube kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: minikube
    #         confinement: classic
    #         channel: latest/stable
    #       - name: kubectl
    #         confinement: classic
    #         channel: latest/stable
    #       - name: helm
    #         confinement: classic
    #         channel: latest/stable
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - minikube version
    #     - helm version
    #     - kubectl version --client
    #     - sudo make deploy-promethues-demo
    #   after_success:
    #     - deactivate

# The connection to the server localhost:8080 was refused - did you specify the right host or port?
    # - name: "voting-app minikube w snaps on bionic amd64"
    #   dist: bionic
    #   arch: amd64
    #   addons:
    #       snaps:
    #         - name: minikube
    #           confinement: classic
    #           channel: latest/stable
    #         - name: kubectl
    #           confinement: classic
    #           channel: latest/stable
    #         - name: helm
    #           confinement: classic
    #           channel: latest/stable    
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     # - sudo make deploy-minikub√∂e-latest
    #     - sudo make deploy-voting-app
    #   after_success:
    #     - deactivate

# X Error starting cluster: cmd failed: sudo /usr/bin/kubeadm init --config /var/lib/kubeadm.yaml --ignore-preflight-errors=SystemVerification 
    # - name: "voting-app minikube wo snaps on focal amd64"
    #   dist: focal
    #   arch: amd64
    #   language: python
    #   # python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-minikube-latest
    #     - sudo make deploy-voting-app
    #   after_success:
    #     - deactivate

# app/deploy-minikube_latest.sh: line 25: /usr/local/bin/minikube: cannot execute binary file: Exec format error
    # - name: "voting-app minikube wo snaps on bionic arm64"
    #   dist: bionic
    #   arch: arm64
    #   language: python
    #   # python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-minikube-latest
    #     - sudo make deploy-voting-app
    #   after_success:
    #     - deactivate

    # TESTED OK
    # - name: "voting-app minikube wo snaps Python 3.7 on bionic amd64"
    #   dist: bionic
    #   arch: amd64
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-minikube-latest
    #     - sudo make deploy-voting-app
    #   after_success:
    #     - deactivate

    #https://kubernetes.io/docs/tutorials/hello-minikube/
    # - name: "kong minikube wo snaps Python 3.7 on bionic amd64"
    #   dist: bionic
    #   arch: amd64
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-minikube-latest
    #     # - sudo make provision-helm
    #     - sudo make deploy-kong
    #   after_success:
    #     - deactivate

    # - name: "ELK  snapped minikube kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: minikube
    #         confinement: classic
    #         channel: latest/stable
    #       - name: kubectl
    #         confinement: classic
    #         channel: latest/stable
    #       - name: helm
    #         confinement: classic
    #         channel: latest/stable
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - minikube version
    #     - helm version
    #     - kubectl version --client
    #     - sudo make deploy-elk
    #   after_success:
    #     - deactivate

    # - name: "ELK wo snaps ython 3.7 on bionic" #OK
    #   dist: bionic
    #   # addons:
    #   #   snaps:
    #   #     - name: minikube
    #   #       confinement: classic
    #   #       channel: latest/stable
    #   #     - name: kubectl
    #   #       confinement: classic
    #   #       channel: latest/stable
    #   #     - name: helm
    #   #       confinement: classic
    #   #       channel: latest/stable
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make provision-minikube
    #     - sudo make provision-kubectl
    #     - sudo make provision-helm
    #     - sudo make deploy-elk
    #   after_success:
    #     - deactivate

    # - name: "EFK  snapped minikube kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: minikube
    #         confinement: classic
    #         channel: latest/stable
    #       - name: kubectl
    #         confinement: classic
    #         channel: latest/stable
    #       - name: helm
    #         confinement: classic
    #         channel: latest/stable
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - minikube version
    #     - helm version
    #     - kubectl version --client
    #     - sudo make deploy-efk
    #   after_success:
    #     - deactivate

    # - name: "EFK wo snaps ython 3.7 on bionic" #OK
    #   dist: bionic
    #   # addons:
    #   #   snaps:
    #   #     - name: minikube
    #   #       confinement: classic
    #   #       channel: latest/stable
    #   #     - name: kubectl
    #   #       confinement: classic
    #   #       channel: latest/stable
    #   #     - name: helm
    #   #       confinement: classic
    #   #       channel: latest/stable
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make provision-minikube
    #     - sudo make provision-kubectl
    #     - sudo make provision-helm
    #     - sudo make deploy-efk
    #   after_success:
    #     - deactivate
    




# TESTING
    # - name: "boxing snapped minikube kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   # addons:
    #   #   snaps:
    #   #     - name: minikube
    #   #       confinement: classic
    #   #       channel: latest/stable
    #   #     - name: kubectl
    #   #       confinement: classic
    #   #       channel: latest/stable
    #   #     - name: helm
    #   #       confinement: classic
    #   #       channel: latest/stable
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-libvirt
    #     - sudo make deploy-vagrant
    #     - sudo make deploy-boxes
    #   after_success:
    #     - deactivate

    # - name: "vegeta snapped minikube kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: minikube
    #         confinement: classic
    #         channel: latest/stable
    #       - name: kubectl
    #         confinement: classic
    #         channel: latest/stable
    #       - name: helm
    #         confinement: classic
    #         channel: latest/stable
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - minikube version
    #     - helm version
    #     - kubectl version --client
    #     - sudo make deploy-locust
    #   after_success:
    #     - deactivate


    # - name: "locust snapped minikube kubectl helm Python 3.7 on bionic" #OK
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: minikube
    #         confinement: classic
    #         channel: latest/stable
    #       - name: kubectl
    #         confinement: classic
    #         channel: latest/stable
    #       - name: helm
    #         confinement: classic
    #         channel: latest/stable
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - minikube version
    #     - helm version
    #     - kubectl version --client
    #     - sudo make deploy-minikube-latest
    #     - sudo make deploy-locust
    #   after_success:
    #     - deactivate

    # - name: "benchmark the API using locust" #
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: minikube
    #         confinement: classic
    #         channel: latest/stable
    #       - name: kubectl
    #         confinement: classic
    #         channel: latest/stable
    #       - name: helm
    #         confinement: classic
    #         channel: latest/stable
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #     - pip install locust
    #     - pip list
    #   script:
    #     - minikube version
    #     - helm version
    #     - kubectl version --client
    #     - sudo locust --host http://127.0.0.1:3000 &
    #     # - locust --host http://127.0.0.1:3000 --master & #use master slave mode
    #     - curl http://localhost:8089 #Locust UI
    #   after_success:
    #     - deactivate

   # TESTED OK
    # https://www.kubeflow.org/docs/started/workstation/minikube-linux/
    # - name: "Installing kubeflow minikube wo snaps Python 3.7 on bionic amd64"
    #   dist: bionic
    #   arch: amd64
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-minikube
    #     - sudo make deploy-kubeflow
    #   after_success:
    #     - deactivate

    # TESTED OK
    #https://kubernetes.io/docs/tutorials/hello-minikube/
    # - name: "storage gluster minikube w snaps Python 3.7 on bionic amd64"
    #   dist: bionic
    #   arch: amd64
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-minikube-latest
    #     - sudo make deploy-gluster
    #   after_success:
    #     - deactivate


    # TESTED OK
    # - name: "weavescope minikube w snaps Python 3.7 on bionic amd64"
    #   dist: bionic
    #   arch: amd64
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-minikube-latest
    #     - sudo make deploy-weavescope
    #   after_success:
    #     - deactivate

    # TESTED OK
    # - name: "minikube wo snaps Python 3.7 on bionic amd64"
    #   dist: bionic
    #   arch: amd64
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-minikube
    #   after_success:
    #     - deactivate

    # TESTED OK
    # - name: "openebs minikube wo snaps Python 3.7 on bionic amd64"
    #   dist: bionic
    #   arch: amd64
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-minikube
    #     - sudo make deploy-openesb
    #   after_success:
    #     - deactivate

    # TESTED OK
    # - name: "k8s dashboard minikube wo snaps Python 3.7 on bionic amd64"
    #   dist: bionic
    #   arch: amd64
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-minikube
    #     - sudo make deploy-dashboard
    #   after_success:
    #     - deactivate

#==========================================================================================
# # https://microk8s.io/#get-started
# # https://multipass.run/docs/installing-on-linux
#     - name: "multipass VM microk8s Python 3.7 on bionic" #OK
#       dist: bionic
#       addons:
#         snaps:
#           - name: multipass
#             confinement: classic # or devmode
#             channel: latest/stable # will be passed to --channel flag
#           # - name: microk8s
#           #   confinement: classic # or devmode
#           #   channel: latest/stable # will be passed to --channel flag
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_microk8s_istio_tasks
#       script:
#         - snap info multipass
#         - sudo  multipass launch --name microk8s-vm --mem 4G --disk 40G #Launch a Multipass instance
#         - sudo multipass list
#         - sudo multipass exec microk8s-vm -- sudo snap install microk8s --classic --channel=1.18/stable
#         - sudo multipass exec microk8s-vm -- sudo microk8s status --wait-ready
#         - - sudo multipass exec microk8s-vm -- sudo microk8s enable dns dashboard registry
#         # - multipass launch -n bar --cloud-init cloud-config.yaml #Pass a cloud-init metadata file to an instance on launch
#         # - sudo multipass shell microk8s-vm #Enter the VM instance
#         # - sudo snap install microk8s --classic --channel=1.18/stable
#         # - sudo microk8s status --wait-ready
# #         # - sudo microk8s enable dns dashboard registry
#       after_success:
#         - deactivate

    # - name: "multipass VM microk8s istio Python 3.7 on bionic" #OK
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: multipass
    #         confinement: classic # or devmode
    #         # channel: latest/edge # will be passed to --channel flag
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_microk8s_istio_tasks
    #   script:
    #     - snap info multipass
    #     # primary                 Running           192.168.64.3     Ubuntu 18.04 LTS
    #     # foo                     Running           192.168.64.2     Ubuntu 18.04 LTS
    #     - sudo  multipass launch --primary
    #     - sudo  multipass launch --name foo
    #     # - root@192.168.64.3 #added my ~/.ssh/id_rsa.pub to the end of ~root/.ssh/authorized_keys and tested root access with ssh
    #     - multipass list
    #     - sudo multipass exec primary -- free -m
    #     - sudo multipass exec primary -- cat /proc/meminfo
    #     - sudo multipass exec primary-- uname -a
    #     - sudo multipass exec primary -- 'curl -sfL https://get.k3s.io | sh -' #Installing k3s
    #     - sudo multipass exec primary -- sudo kubectl get nodes
    #     - sudo multipass exec primary -- cat /var/lib/rancher/k3s/server/node-token
        # - sudo multipass exec foo -- 'curl -sfL https://get.k3s.io | K3S_URL=https://192.168.64.3:6443 K3S_TOKEN=`cat token` sh -' #Adding a new node
        # - sudo multipass exec primary -- sudo kubectl get nodes
        # - sudo multipass exec primary -- sudo cat /etc/rancher/k3s/k3s.yaml #get the kubeconfig
        # - sed -i.bak -e 's/127.0.0.1:6443/192.168.64.3/g' myk3sconfig #save that locally and just change the ‚Äúserver‚Äù line to match our master node
        # - "!cat"
        # - export KUBECONFIG=$(pwd)/myk3sconfig
        # - kubectl get nodes
        # - kubectl api-resources --insecure-skip-tls-verify
        # - sudo multipass exec foo -- 'sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config'
        # - sudo multipass exec foo -- 'sudo chmod 644 ~/.kube/config
        # - sudo multipass exec foo -- 'kubectl get pods --all-namespaces
        # - sudo  multipass launch --name microk8s-vm --mem 4G --disk 40G #Launch a Multipass instance
        # - sudo multipass list
        # - sudo multipass exec microk8s-vm -- sudo snap install microk8s --classic --channel=1.18/stable
        # - sudo multipass exec microk8s-vm -- sudo microk8s status --wait-ready
        # - sudo multipass exec microk8s-vm -- sudo microk8s enable dns dashboard registry
      # after_success:
      #   - deactivate


#     # - name: "multipass Python 3.7 on bionic" #OK
#     #   dist: bionic
#     #   addons:
#     #     snaps:
#     #       - name: multipass
#     #         confinement: classic # or devmode
#     #         # channel: latest/edge # will be passed to --channel flag
#     #   language: python
#     #   python: 3.7
#     #   before_install:
#     #     - pip3 install virtualenv
#     #     - virtualenv -p $(which python3) ~venvpy3
#     #     - source ~venvpy3/bin/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #   script:
#     #     - ls -l /var/snap/multipass/common/multipass_socket #
#     #     # - groups | grep sudo
#     #     - snap info multipass
#     #   after_success:
#     #     - deactivate
#
#     - name: "microk8s Python 3.7 on bionic" #
#       dist: bionic
#       addons:
#         snaps:
#           - name: microk8s
#             confinement: classic # or devmode
#             channel: latest/stable # will be passed to --channel flag
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_microk8s_tasks
#       after_success:
#         - deactivate
#
#     # - name: "microk8s Python 3.7 on xenial" #OK
#     #   dist: xenial
#     #   addons:
#     #     snaps:
#     #       - name: microk8s
#     #         confinement: classic # or devmode
#     #         channel: latest/stable # will be passed to --channel flag
#     #   language: python
#     #   python: 3.7
#     #   before_install:
#     #     - pip3 install virtualenv
#     #     - virtualenv -p $(which python3) ~venvpy3
#     #     - source ~venvpy3/bin/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #   <<: *fleet_script_microk8s_tasks
#     #   after_success:
#     #     - deactivate
#
#
# # - name: "minikube gardener istio  Python 3.7 on bionic" #
# #   dist: bionic
# #   language: python
# #   python: 3.7
# #   before_install:
# #     - pip3 install virtualenv
# #     - virtualenv -p $(which python3) ~venvpy3
# #     - source ~venvpy3/bin/activate
# #   <<: *fleet_install_tasks
# #   <<: *fleet_script_tasks
# #   <<: *fleet_script_minikube_gardener_tasks
# #   after_success:
# #     - deactivate
#
#
#     # - name: "kind gardener istio  Python 3.7 on bionic" #OK
#     #   dist: bionic
#     #   language: python
#     #   python: 3.7
#     #   before_install:
#     #     - pip3 install virtualenv
#     #     - virtualenv -p $(which python3) ~venvpy3
#     #     - source ~venvpy3/bin/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #   <<: *fleet_script_kind_gardener_tasks
#     #   after_success:
#     #     - deactivate
#
#
#
#     # - name: "kind istio  Python 3.7 on bionic" #OK
#     #   dist: bionic
#     #   language: python
#     #   python: 3.7
#     #   before_install:
#     #     - pip3 install virtualenv
#     #     - virtualenv -p $(which python3) ~venvpy3
#     #     - source ~venvpy3/bin/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #   <<: *fleet_script_kind_istio_tasks
#     #   after_success:
#     #     - deactivate
#
#
#
#     # - name: "minikube latest  Python 3.7 on bionic" #OK
#     #   dist: bionic
#     #   language: python
#     #   python: 3.7
#     #   before_install:
#     #     - pip3 install virtualenv
#     #     - virtualenv -p $(which python3) ~venvpy3
#     #     - source ~venvpy3/bin/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #   <<: *fleet_script_minikube_latest_tasks
#     #   after_success:
#     #     - deactivate
#     #




    # - name: "minikube podman latest  Python 3.7 on bionic amd64" #OK
    #   dist: bionic
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_minikube_latest_tasks
    #   after_success:
    #     - deactivate


#     # - name: "minikube latest  Python 3.7 on xenial" #OK
#     #   dist: xenial
#     #   language: python
#     #   python: 3.7
#     #   before_install:
#     #     - pip3 install virtualenv
#     #     - virtualenv -p $(which python3) ~venvpy3
#     #     - source ~venvpy3/bin/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #   <<: *fleet_script_minikube_latest_tasks
#     #   after_success:
#     #     - deactivate
#
#     # - name: "Python 3.7 on bionic arm64" # package architecture (amd64) does not match system (arm64)
#     #   os: linux
#     #   arch: arm64
#     #   dist: bionic
#     #   language: python
#     #   python: 3.7
#     #   # env:
#     #   #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
#     #   # compiler:
#     #   #  - gcc
#     #   #  - clang
#     #   before_install:
#     #     - pip3 install virtualenv
#     #     - virtualenv -p $(which python3) ~venvpy3
#     #     - source ~venvpy3/bin/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #   <<: *fleet_script_vagrant_tasks
#     #   after_success:
#     #     - deactivate
#     #
#     # - name: "Python 3.7 on bionic ppc64le" #Unable to locate package osquery
#     #   os: linux
#     #   arch: ppc64le
#     #   dist: bionic
#     #   language: python
#     #   python: 3.7
#     #   # env:
#     #   #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
#     #   # compiler:
#     #   #  - gcc
#     #   #  - clang
#     #   before_install:
#     #     - pip3 install virtualenv
#     #     - virtualenv -p $(which python3) ~venvpy3
#     #     - source ~venvpy3/bin/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #   <<: *fleet_script_vagrant_tasks
#     #   after_success:
#     #     - deactivate
#     #
#     # - name: "Python 3.7 on bionic s390x" #Unable to locate package osquery
#     #   os: linux
#     #   arch: s390x
#     #   dist: bionic
#     #   language: python
#     #   python: 3.7
#     #   # env:
#     #   #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
#     #   # compiler:
#     #   #  - gcc
#     #   #  - clang
#     #   before_install:
#     #     - pip3 install virtualenv
#     #     - virtualenv -p $(which python3) ~venvpy3
#     #     - source ~venvpy3/bin/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #   <<: *fleet_script_vagrant_tasks
#     #   after_success:
#     #     - deactivate
#
#
#     # - name: "Python 2.7 on xenial amd64"
#     #   dist: xenial
#     #   language: python
#     #   python: 2.7
#     #   before_install:
#     #     - pip install virtualenv
#     #     - virtualenv -p $(which python2) ~venvpy2
#     #     - source ~venvpy2/bin/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #
#     #   after_success:
#     #     - deactivate
#
#
#
# #============================================================================ multiarch linux ============================================================================
#
#      #https://microk8s.io/docs/setting-snap-channel
#      # https://microk8s.io/docs/addons#list
#      #https://multipass.run/docs/installing-on-linux
#     - name: "MicroK8s Multipass edge Python 3.7 on xenial arm64"
#       os: linux
#       arch: arm64
#       dist: xenial
#       addons:
#         # apt:
#         #   sources:
#         #     - deadsnakes
#         #     - sourceline: 'ppa:ubuntu-toolchain-r/test'
#         #     - sourceline: 'deb https://packagecloud.io/chef/stable/ubuntu/precise main'
#         #       key_url: 'https://packagecloud.io/gpg.key'
#         #   packages:
#         #   - cmake
#         #   - time
#         snaps:
#           - name: multipass
#             confinement: classic # or devmode
#             channel: latest/edge # will be passed to --channel flag
#           - name: microk8s
#             confinement: classic # or devmode
#             channel: latest/stable # will be passed to --channel flag
#       language: python
#       python: 3.7
#       # env:
#       #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
#       # compiler:
#       #  - gcc
#       #  - clang
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#         # - snap install multipass --beta #For architectures other than amd64, you‚Äôll need the beta channel at the moment
#         # - sudo snap install multipass --edge --beta # use the edge channel to get the latest development build
#         # - sudo snap install microk8s --classic --channel=edge
#         - snap info multipass
#         - snap info microk8s #All the currently available channels
#         - sudo microk8s stop
#         - sudo rm -rf /var/snap/microk8s/common/var/lib/containerd
#         - ls -l /var/snap/microk8s/current/args/containerd-template.toml
#         - sudo sed 's%snapshotter = "overlayfs"%snapshotter = "zfs"%g' /var/snap/microk8s/current/args/containerd-template.toml
#         - sudo zfs create -o mountpoint=/var/snap/microk8s/common/var/lib/containerd/io.containerd.snapshotter.v1.zfs $POOL/containerd
#         - sudo microk8s start
#         - sudo microk8s status
#
#       after_success:
#         - deactivate
#
#      #https://multipass.run/docs/installing-on-linux
#     - name: "MicroK8s Multipass beta Python 3.7 on xenial arm64"
#       os: linux
#       arch: arm64
#       dist: xenial
#       addons:
#         snaps:
#           - name: multipass
#             confinement: classic # or devmode
#             channel: latest/beta # will be passed to --channel flag
#           - name: microk8s
#             confinement: classic # or devmode
#             channel: latest/stable # will be passed to --channel flag
#       language: python
#       python: 3.7
#       # env:
#       #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
#       # compiler:
#       #  - gcc
#       #  - clang
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#         # - sudo snap install multipass --beta #For architectures other than amd64, you‚Äôll need the beta channel at the moment
#         # - snap install multipass --edge --beta # use the edge channel to get the latest development build
#         - multipass version
#         - sudo microk8s status
#         - snap info multipass
#         - snap info microk8s #All the currently available channels
#         - sudo microk8s stop
#         - sudo rm -rf /var/snap/microk8s/common/var/lib/containerd
#         - ls -l /var/snap/microk8s/current/args/containerd-template.toml
#         - sudo sed 's%snapshotter = "overlayfs"%snapshotter = "zfs"%g' /var/snap/microk8s/current/args/containerd-template.toml
#         - sudo zfs create -o mountpoint=/var/snap/microk8s/common/var/lib/containerd/io.containerd.snapshotter.v1.zfs $POOL/containerd
#         - sudo microk8s start
#         - sudo microk8s status
#
#       after_success:
#         - deactivate
#
#      #Running MicroK8s on some ARM hardware,Raspberry Pi/ARM
#     - name: "MicroK8s Python 3.7 on xenial arm64" #OK
#       os: linux
#       arch: arm64
#       dist: xenial
#       addons:
#         snaps:
#           - name: microk8s
#             confinement: classic # or devmode
#             channel: latest/beta # will be passed to --channel flag
#       language: python
#       python: 3.7
#       # env:
#       #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
#       # compiler:
#       #  - gcc
#       #  - clang
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#         - sudo microk8s stop
#         - sudo rm -rf /var/snap/microk8s/common/var/lib/containerd
#         - ls -l /var/snap/microk8s/current/args/containerd-template.toml
#         - sudo sed 's%snapshotter = "overlayfs"%snapshotter = "zfs"%g' /var/snap/microk8s/current/args/containerd-template.toml
#         - sudo zfs create -o mountpoint=/var/snap/microk8s/common/var/lib/containerd/io.containerd.snapshotter.v1.zfs $POOL/containerd
#         - sudo microk8s start
#         - sudo microk8s status
#       after_success:
#         - deactivate
#
#     # - name: "Python 3.7 on xenial ppc64le" #Unable to locate package osquery
#     #   os: linux
#     #   arch: ppc64le
#     #   dist: xenial
#     #   language: python
#     #   python: 3.7
#     #   # env:
#     #   #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
#     #   # compiler:
#     #   #  - gcc
#     #   #  - clang
#     #   before_install:
#     #     - pip3 install virtualenv
#     #     - virtualenv -p $(which python3) ~venvpy3
#     #     - source ~venvpy3/bin/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #   <<: *fleet_script_vagrant_tasks
#     #   after_success:
#     #     - deactivate
#     #
#     # - name: "Python 3.7 on xenial s390x" #Unable to locate package osquery
#     #   os: linux
#     #   arch: s390x
#     #   dist: xenial
#     #   language: python
#     #   python: 3.7
#     #   # env:
#     #   #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
#     #   # compiler:
#     #   #  - gcc
#     #   #  - clang
#     #   before_install:
#     #     - pip3 install virtualenv
#     #     - virtualenv -p $(which python3) ~venvpy3
#     #     - source ~venvpy3/bin/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #   <<: *fleet_script_vagrant_tasks
#     #   after_success:
#     #     - deactivate
#
#
#   # =============================================macOS=============================================
#
#     - name: "vbox vagrant    Python 2.7.17 on macOS 10.15.4 osx xcode11.5" #installer: Error - Your CPU does not have the features necessary for Multipass. Installation cannot proceed.
#       os: osx
#       osx_image: xcode11.5
#       language: shell
#       addons:
#         homebrew:
#           packages:
#           - beanstalk
#           update: true
#       # addons:
#       #   homebrew:
#       #     # brewfile: Brewfile.travis
#       #     # packages:
#       #     #   - multipass
#       #     # taps: homebrew/cask-versions
#       #     casks: # Installing Casks
#       #       - multipass
#       #     update: true
#       before_install:
#         - pip install virtualenv
#         - virtualenv -p $(which python2) ~venvpy2
#         - source ~venvpy2/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#         # - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" #Install Homebrew
#         # - brew cask install multipass
#         # - multipass version
#         - brew cask install vagrant
#         - brew cask install virtualbox
#         - brew list --versions
#         - vagrant box add "bento/centos-8.0" --provider=virtualbox
#         - vagrant init
#         - vagrant up
#         - vagrant ssh -c "hostnamectl"
#         - vagrant destroy -f
#         # - sudo multipass set local.driver=virtualbox #If you‚Äôd like to use VirtualBox, run the following in the terminal after installing Multipass
#       after_success:
#         - brew cask uninstall multipass
#         - deactivate
#
#
#     - name: "docker docker-machine vbox  Python 2.7.17 on macOS 10.15.4 osx xcode11.5" #installer: Error - Your CPU does not have the features necessary for Multipass. Installation cannot proceed.
#       os: osx
#       osx_image: xcode11.5
#       language: shell
#       addons:
#         homebrew:
#           packages:
#           - beanstalk
#           update: true
#       # addons:
#       #   homebrew:
#       #     # brewfile: Brewfile.travis
#       #     # packages:
#       #     #   - multipass
#       #     # taps: homebrew/cask-versions
#       #     casks: # Installing Casks
#       #       - multipass
#       #     update: true
#       before_install:
#         - pip install virtualenv
#         - virtualenv -p $(which python2) ~venvpy2
#         - source ~venvpy2/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#         # - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" #Install Homebrew
#         # - brew cask install multipass
#         # - multipass version
#         - brew install docker docker-machine
#         - docker --version
#         - brew cask install virtualbox
#         - brew list --versions
#         - docker-machine create --driver virtualbox default
#         - docker-machine ls
#         - docker-machine env default
#         - eval "$(docker-machine env default)"
#         - docker run hello-world
#         - docker-machine stop default
#         # - sudo multipass set local.driver=virtualbox #If you‚Äôd like to use VirtualBox, run the following in the terminal after installing Multipass
#       after_success:
#         - brew cask uninstall multipass
#         - deactivate
#
#
#     #The default backend on macOS is hyperkit, wrapping Apple‚Äôs Hypervisor.framework
#     #You need macOS Yosemite, version 10.10.3 or later installed on a 2010 or newer Mac
#     #https://multipass.run/docs/installing-on-macos
#     #https://docs.travis-ci.com/user/reference/osx/#macos-version
#     - name: "microk8s Multipass Python 2.7.17 on macOS 10.15.4 osx xcode11.5" #installer: Error - Your CPU does not have the features necessary for Multipass. Installation cannot proceed.
#       os: osx
#       osx_image: xcode11.5
#       language: shell
#       addons:
#         homebrew:
#           packages:
#           - beanstalk
#           update: true
#       # addons:
#       #   homebrew:
#       #     # brewfile: Brewfile.travis
#       #     # packages:
#       #     #   - multipass
#       #     # taps: homebrew/cask-versions
#       #     casks: # Installing Casks
#       #       - multipass
#       #     update: true
#       before_install:
#         - pip install virtualenv
#         - virtualenv -p $(which python2) ~venvpy2
#         - source ~venvpy2/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#         # - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" #Install Homebrew
#         # - brew cask install multipass
#         # - multipass version
#         - brew list --versions
#         # - sudo multipass set local.driver=virtualbox #If you‚Äôd like to use VirtualBox, run the following in the terminal after installing Multipass
#       after_success:
#         # - brew cask uninstall multipass
#         - deactivate
#
#     - name: "microk8s Multipass cluster1 Python 2.7.17 on macOS 10.15.4 osx xcode11.5" #installer: Error - Your CPU does not have the features necessary for Multipass. Installation cannot proceed.
#       os: osx
#       osx_image: xcode11.5
#       language: shell
#       addons:
#         homebrew:
#           casks: #Installing Casks
#           - dotnet-sdk
#       # addons:
#       #   homebrew:
#       #     # brewfile: Brewfile.travis
#       #     # packages:
#       #     #   - multipass
#       #     # taps: homebrew/cask-versions
#       #     casks: # Installing Casks
#       #       - multipass
#       #     update: true
#       before_install:
#         - pip install virtualenv
#         - virtualenv -p $(which python2) ~venvpy2
#         - source ~venvpy2/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#         # - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" #Install Homebrew
#         # - brew cask install multipass
#         # - multipass version
#         # - sh-keygen -b 2048 -f ~/.ssh/multipass -t rsa -q -N "" #create a ssh key
#         # - cat ~/.ssh/multipass.pub >> cloud-init.yaml #provide the ssh public key to cloud-init file in order to ssh into multipass vm with ssh private key
#         # - sudo multipass set local.driver=virtualbox #If you‚Äôd like to use VirtualBox, run the following in the terminal after installing Multipass
#         - brew list --versions
#       after_success:
#         - brew cask uninstall multipass
#         - deactivate
# #
# # https://multipass.run/docs/installing-on-macos
# # https://microk8s.io/#get-started
#     - name: "Installing Multipass on macOS 10.15.4 osx xcode11.5" #installer: Error - Your CPU does not have the features necessary for Multipass. Installation cannot proceed.
#       os: osx
#       osx_image: xcode11.5
#       language: shell
#       addons:
#         homebrew:
#           casks: #Installing Casks
#           # - dotnet-sdk #OK
#           - multipass
#       # addons:
#       #   homebrew:
#       #     # brewfile: Brewfile.travis
#       #     # packages:
#       #     #   - multipass
#       #     # taps: homebrew/cask-versions
#       #     casks: # Installing Casks
#       #       - multipass
#       #     update: true
#       before_install:
#         - pip install virtualenv
#         - virtualenv -p $(which python2) ~venvpy2
#         - source ~venvpy2/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#         # - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" #Install Homebrew
#         - brew cask install multipass
#         - multipass version
#         - sudo multipass launch --name microk8s-vm --mem 4G --disk 40G
#         - sudo multipass shell microk8s-vm #Enter the VM instance
#         - sudo snap install microk8s --classic
#         - sudo microk8s status --wait-ready
#         - sudo microk8s enable dns dashboard registry #Turn on standard services
#         - brew list --versions
#       after_success:
#         - brew cask uninstall multipass
#         - deactivate
#
#
#     - name: "Multipass microk8s cluster2 Python 2.7.17 on macOS 10.15.4 osx xcode11.5" #installer: Error - Your CPU does not have the features necessary for Multipass. Installation cannot proceed.
#       os: osx
#       osx_image: xcode11.5
#       language: shell
#       addons:
#         homebrew:
#           casks: #Installing Casks
#           - dotnet-sdk
#       # addons:
#       #   homebrew:
#       #     # brewfile: Brewfile.travis
#       #     # packages:
#       #     #   - multipass
#       #     # taps: homebrew/cask-versions
#       #     casks: # Installing Casks
#       #       - multipass
#       #     update: true
#       before_install:
#         - pip install virtualenv
#         - virtualenv -p $(which python2) ~venvpy2
#         - source ~venvpy2/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#         # - /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" #Install Homebrew
#         - brew cask install multipass
#         - multipass version
#         - multipass find #returns a list of the available images
#         - sudo multipass launch ubuntu
#         - sudo multipass launch 16.04
#         - multipass list #list instances
#         # - multipass shell rewarded-stud #connect to a running instance,find its instance name with the list option
#         #run commands in an instance indirectly without connecting directly to the instance with the exec option, and the command separated with a double dash (--)
#         # install MicroK8s as a snap on your Multipass-hosted Ubuntu instance
#         # - multipass exec rewarded-stud -- ls -a
#         # - multipass exec rewarded-stud -- sudo snap install microk8s --classic #Alternatively,without connecting to the instance, install MicroK8
#         # - multipass exec rewarded-stud -- sudo microk8s.start  #Alternatively,without connecting to the instance,start MicroK8
#         # - multipass exec rewarded-stud -- /snap/bin/microk8s.start #Alternatively,without connecting to the instance,start MicroK8
#         # - multipass exec rewarded-stud -- sudo usermod -a -G microk8s multipass #Alternatively,without connecting to the instance, add the multipass user to the microk8s group, so it has permissions to run and access the services needed
#         # - multipass exec intrigued-kudu -- /snap/bin/microk8s.kubectl cluster-info #Alternatively,without connecting to the instance,see what services are running on the Kubernetes cluster,Replace ‚Äú127.0.0.1‚Äù with the IP of the VM, and you should be able to access services as usual
#         # - multipass exec intrigued-kudu -- /snap/bin/microk8s.config > kubeconfig #Alternatively,without connecting to the instance,copy the kubeconfig file from the instance to the host multipass installed
#         # - kubectl --kubeconfig=kubeconfig get all --all-namespaces #use the new config to access Kubernetes running on the instance
#         # - sudo multipass stop rewarded-stud
#         # - sudo multipass delete rewarded-stud
#         # - sudo multipass purge #to completely remove all deleted instances and images
#         # - sh-keygen -b 2048 -f ~/.ssh/multipass -t rsa -q -N "" #create a ssh key
#         # - cat ~/.ssh/multipass.pub >> cloud-init.yaml #provide the ssh public key to cloud-init file in order to ssh into multipass vm with ssh private key
#         # - sudo multipass set local.driver=virtualbox #If you‚Äôd like to use VirtualBox, run the following in the terminal after installing Multipass
#         - brew list --versions
#       after_success:
#         - brew cask uninstall multipass
#         - deactivate
#
#
#     - name: "microk8s Python 2.7.17 on macOS 10.14.6osx xcode11.3"
#       os: osx
#       osx_image: xcode11.3
#       language: shell
#       addons:
#         homebrew:
#           taps: homebrew/cask-versions #Installing From Taps
#           casks: java8
#       # addons:
#       #   homebrew:
#       #     casks:
#       #       - mactex
#       #     packages:
#       #       - multipass
#       before_install:
#         - pip install virtualenv
#         - virtualenv -p $(which python2) ~venvpy2
#         - source ~venvpy2/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       # <<: *fleet_script_microk8s_macos_tasks
#       script:
#         - brew list --versions
#       after_success:
#         - deactivate
#
#
#     # - name: "Python 3.7.5 on macOS xcode10.2"
#     #   os: osx
#     #   osx_image: xcode10.2
#     #   language: shell
#     #   before_install:
#     #     - pip3 install virtualenv
#     #     - virtualenv -p $(which python3) ~venvpy3
#     #     - source ~venvpy3/bin/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #   after_success:
#     #     - deactivate
#     #
#     # - name: "Python 3.7.5 on macOS xcode9.4 "
#     #   os: osx
#     #   osx_image: xcode9.4
#     #   language: shell
#     #   before_install:
#     #     - pip3 install virtualenv
#     #     - virtualenv -p $(which python3) ~venvpy3
#     #     - source ~venvpy3/bin/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #   after_success:
#     #     - deactivate
#
#   # =============================================windows=============================================
#
# # https://docs.docker.com/docker-for-windows/install/
# # Windows 10 64-bit: Pro, Enterprise, or Education (Build 15063 or later).
# # Hyper-V and Containers Windows features must be enabled.
#     - name: "docker desktop choco k8s  Python 3.8 on Windows"
#       os: windows
#       language: shell
#       env:
#         - PATH=/c/Python38:/c/Python38/Scripts:$PATH
#       before_install:
#         - choco install python --version 3.8.1
#         - pip install virtualenv
#         - virtualenv $HOME/venv
#         - source $HOME/venv/Scripts/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#           - choco install -y docker-desktop #https://docs.docker.com/docker-for-windows/kubernetes/
#           - pwsh  docker --version
#           - pwsh docker run hello-world
#           - pwsh docker image ls
#       after_success:
#         - deactivate
#
#     #Only Windows 10 Pro or Enterprise, version 1803 (‚ÄúApril 2018 Update‚Äù) or later is currently supported.
#     #You will need either Hyper-V enabled (only Windows 10 Professional or Enterprise), or VirtualBox installed.
#     #Multipass defaults to using Hyper-V as it‚Äôs virtualization provider
#     #https://multipass.run/docs/installing-on-windows
#     - name: "microk8s Multipass  Python 3.8 on Windows"
#       os: windows
#       language: shell
#       env:
#         - PATH=/c/Python38:/c/Python38/Scripts:$PATH
#       before_install:
#         - choco install python --version 3.8.1
#         - pip install virtualenv
#         - virtualenv $HOME/venv
#         - source $HOME/venv/Scripts/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#           - choco install wget
#           - wget https://github.com/canonical/multipass/releases/download/v1.2.1/multipass-1.2.1+win-win64.exe
#           # - multipass set local.driver=virtualbox
#           # - multipass version
#       after_success:
#         - deactivate
#
#     #https://docs.travis-ci.com/user/reference/windows/
#     - name: "microk8s Python 3.8 on Windows"
#       os: windows
#       language: shell
#       env:
#         - PATH=/c/Python38:/c/Python38/Scripts:$PATH
#       before_install:
#         - choco install python --version 3.8.1
#         - pip install virtualenv
#         - virtualenv $HOME/venv
#         - source $HOME/venv/Scripts/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_microk8s_win_tasks
#       after_success:
#         - deactivate
#
# # https://multipass.run/docs/installing-on-windows
# # https://microk8s.io/#get-started
#     - name: "microk8s Python 3.8 on Windows"
#       os: windows
#       language: shell
#       env:
#         - PATH=/c/Python38:/c/Python38/Scripts:$PATH
#       before_install:
#         - choco install python --version 3.8.1
#         - pip install virtualenv
#         - virtualenv $HOME/venv
#         - source $HOME/venv/Scripts/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_microk8s_win_tasks
#       script:
#         - choco install multipass
#         # - multipass set local.driver=virtualbox #Multipass defaults to using Hyper-V as it‚Äôs virtualization provider
#         - multipass launch --name microk8s-vm --mem 4G --disk 40G
#         - multipass shell microk8s-vm
#         - sudo snap install microk8s --classic
#         - sudo microk8s status --wait-ready
#         - sudo microk8s enable dns dashboard registry
#       after_success:
#         - deactivate
#
#     # - name: "Python 3.7 on Windows"
#     #   os: windows
#     #   language: shell
#     #   env: PATH=/c/Python37:/c/Python37/Scripts:$PATH
#     #   before_install:
#     #     - choco install python --version 3.7.3
#     #     - python -m pip install virtualenv
#     #     - virtualenv $HOME/venv
#     #     - source $HOME/venv/Scripts/activate
#     #   <<: *fleet_install_tasks
#     #   <<: *fleet_script_tasks
#     #   after_success:
#     #     - deactivate
